from cf_units import Unit
from cube import StrOr
from cf_units import Unit
from iris.coords import Coord
from iris.cube import Cube
from iris.config import get_logger as get_logger
from typing import Any, Callable, Optional, TYPE_CHECKING, Tuple, Union

import numpy as np

#logger: Any

OtherType = Union[Cube, float, Coord]

def abs(cube: Cube, in_place: bool = ...) -> Cube: ...
def intersection_of_cubes(cube: Cube, other_cube: Cube) -> Tuple[Cube, Cube]: ...
def add(
    cube: Cube, other: OtherType, dim: Optional[Any] = ..., in_place: bool = ...
) -> Cube: ...
def subtract(
    cube: Cube, other: OtherType, dim: Optional[Any] = ..., in_place: bool = ...
) -> Cube: ...
def multiply(
    cube: Cube, other: OtherType, dim: Optional[Any] = ..., in_place: bool = ...
) -> Cube: ...
def divide(
    cube: Cube, other: OtherType, dim: Optional[Any] = ..., in_place: bool = ...
) -> Cube: ...
def exponentiate(cube: Cube, exponent: float, in_place: bool = ...) -> Cube: ...
def exp(cube: Cube, in_place: bool = ...) -> Cube: ...
def log(cube: Cube, in_place: bool = ...) -> Cube: ...
def log2(cube: Cube, in_place: bool = ...) -> Cube: ...
def log10(cube: Cube, in_place: bool = ...) -> Cube: ...
def apply_ufunc(
    ufunc: np.ufunc,
    cube: Cube,
    other: Optional[Cube] = ...,
    new_unit: Optional[StrOr[Unit]] = ...,
    new_name: Optional[str] = ...,
    in_place: bool = ...,
) -> Cube: ...
def _math_op_common(
    cube: Cube,
    operation_function: Callable[..., Any],  # TODO: more specific type signature here
    new_unit: Union[str, Unit],
    new_dtype: Optional[np.dtype] = ...,
    in_place: bool = ...,
    skeleton_cube: bool = ...,
) -> Cube: ...

class IFunc:
    nin: Any = ...
    data_func: Any = ...
    units_func: Any = ...
    def __init__(self, data_func: Any, units_func: Any) -> None: ...
    def __call__(
        self,
        cube: Cube,
        other: Optional[Any] = ...,
        dim: Optional[Any] = ...,
        in_place: bool = ...,
        new_name: Optional[Any] = ...,
        **kwargs_data_func: Any
    ): ...
