from iris.common import Resolve as Resolve, SERVICES as SERVICES
from iris.config import get_logger as get_logger
from typing import Any, Optional

logger: Any

def abs(cube: Any, in_place: bool = ...): ...
def intersection_of_cubes(cube: Any, other_cube: Any): ...
def add(cube: Any, other: Any, dim: Optional[Any] = ..., in_place: bool = ...): ...
def subtract(cube: Any, other: Any, dim: Optional[Any] = ..., in_place: bool = ...): ...
def multiply(cube: Any, other: Any, dim: Optional[Any] = ..., in_place: bool = ...): ...
def divide(cube: Any, other: Any, dim: Optional[Any] = ..., in_place: bool = ...): ...
def exponentiate(cube: Any, exponent: Any, in_place: bool = ...): ...
def exp(cube: Any, in_place: bool = ...): ...
def log(cube: Any, in_place: bool = ...): ...
def log2(cube: Any, in_place: bool = ...): ...
def log10(cube: Any, in_place: bool = ...): ...
def apply_ufunc(ufunc: Any, cube: Any, other: Optional[Any] = ..., new_unit: Optional[Any] = ..., new_name: Optional[Any] = ..., in_place: bool = ...): ...

class IFunc:
    nin: Any = ...
    data_func: Any = ...
    units_func: Any = ...
    def __init__(self, data_func: Any, units_func: Any) -> None: ...
    def __call__(self, cube: Any, other: Optional[Any] = ..., dim: Optional[Any] = ..., in_place: bool = ..., new_name: Optional[Any] = ..., **kwargs_data_func: Any): ...
