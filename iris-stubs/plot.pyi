import matplotlib
import matplotlib.contour
import matplotlib.collections
import matplotlib.pyplot as plt
from collections import namedtuple
from iris.exceptions import IrisError as IrisError
from typing import Any, Optional
import matplotlib

from iris.cube import Cube

# BREWER_CITE: str

PlotDefn = namedtuple('PlotDefn', ['coords', 'transpose'])

def contour(cube: Cube, *args: Any, **kwargs: Any) -> matplotlib.contour.QuadContourSet: ...
def contourf(cube: Cube, *args: Any, **kwargs: Any) -> matplotlib.contour.QuadContourSet: ...
def default_projection(cube: Cube): ...
def default_projection_extent(cube: Cube, mode: Any = ...): ...
def orography_at_bounds(cube: Cube, facecolor: str = ..., coords: Optional[Any] = ..., axes: Optional[Any] = ...): ...
def orography_at_points(cube: Cube, facecolor: str = ..., coords: Optional[Any] = ..., axes: Optional[Any] = ...): ...
def outline(cube: Cube, coords: Optional[Any] = ..., color: str = ..., linewidth: Optional[Any] = ..., axes: Optional[Any] = ...): ...
def pcolor(cube: Cube, *args: Any, **kwargs: Any) -> matplotlib.collections.PolyCollection: ...
def pcolormesh(cube: Cube, *args: Any, **kwargs: Any) -> matplotlib.collections.Collection: ...
def points(cube: Cube, *args: Any, **kwargs: Any): ...
def quiver(u_cube: Cube, v_cube: Cube, *args: Any, **kwargs: Any): ...
def plot(*args: Any, **kwargs: Any): ...
def scatter(x: Any, y: Any, *args: Any, **kwargs: Any): ...
show = plt.show

def symbols(x: Any, y: Any, symbols: Any, size: Any, axes: Optional[Any] = ..., units: str = ...) -> None: ...
def citation(text: Any, figure: Optional[Any] = ..., axes: Optional[Any] = ...) -> None: ...
