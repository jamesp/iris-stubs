from collections import namedtuple
from iris.cube import Cube
from typing import Any, Iterable, Optional, Protocol, TYPE_CHECKING, overload

from numpy.typing import ArrayLike

# _AuxCoverage = namedtuple('AuxCoverage', ['cube', 'common_items_aux', 'common_items_scalar', 'local_items_aux', 'local_items_scalar', 'dims_common', 'dims_local', 'dims_free'])

# _CategoryItems = namedtuple('CategoryItems', ['items_dim', 'items_aux', 'items_scalar'])

# _DimCoverage = namedtuple('DimCoverage', ['cube', 'metadata', 'coords', 'dims_common', 'dims_local', 'dims_free'])

# _Item = namedtuple('Item', ['metadata', 'coord', 'dims'])

# _PreparedFactory = namedtuple('PreparedFactory', ['container', 'dependencies'])

# _PreparedItem = namedtuple('PreparedItem', ['metadata', 'points', 'bounds', 'dims', 'container'])

# _PreparedMetadata = namedtuple('PreparedMetadata', ['combined', 'src', 'tgt'])

class Resolve:
    lhs_cube: Cube = ...
    rhs_cube: Cube = ...
    lhs_cube_resolved: Any = ...
    rhs_cube_resolved: Any = ...
    lhs_cube_category: Any = ...
    rhs_cube_category: Any = ...
    lhs_cube_category_local: Any = ...
    rhs_cube_category_local: Any = ...
    category_common: Any = ...
    lhs_cube_dim_coverage: Any = ...
    lhs_cube_aux_coverage: Any = ...
    rhs_cube_dim_coverage: Any = ...
    rhs_cube_aux_coverage: Any = ...
    map_rhs_to_lhs: Any = ...
    mapping: Any = ...
    prepared_category: Any = ...
    prepared_factories: Any = ...

    @overload
    def __init__(self, lhs: Cube = ..., rhs: Cube = ...) -> None: ...
    @overload
    def __init__(self, lhs: None, rhs: None) -> None: ...

    def __call__(self, lhs: Cube, rhs: Cube) -> Resolve: ...
    
    def cube(self, data: ArrayLike, in_place: bool = ...) -> Cube: ...
    
    @property
    def mapped(self) -> bool: ...
    @property
    def shape(self) -> Iterable[int]: ...
